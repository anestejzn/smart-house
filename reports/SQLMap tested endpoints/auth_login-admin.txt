[*] starting @ 15:33:39 /2023-06-17/

[1/1] URL:
GET https://localhost:8443/auth/login-admin
POST data: email=admin%40gmail.com&password=sifra1234A2%40
do you want to test this URL? [Y/n/q]
> Y
[15:33:40] [INFO] testing URL 'https://localhost:8443/auth/login-admin'
[15:33:40] [INFO] using 'C:\Users\Korisnik\AppData\Local\sqlmap\output\results-06172023_0333pm.csv' as the CSV results file in multiple targets mode
[15:33:40] [INFO] testing connection to the target URL
[15:33:40] [WARNING] the web server responded with an HTTP error code (415) which could interfere with the results of the tests
[15:33:40] [INFO] testing if the target URL content is stable
[15:33:40] [WARNING] target URL content is not stable (i.e. content differs). sqlmap will base the page comparison on a sequence matcher. If no dynamic nor injectable parameters are detected, or in case of junk results, refer to user's manual paragraph 'Page comparison'
how do you want to proceed? [(C)ontinue/(s)tring/(r)egex/(q)uit] C
[15:33:41] [WARNING] heuristic (basic) test shows that POST parameter 'email' might not be injectable
[15:33:41] [INFO] testing for SQL injection on POST parameter 'email'
[15:33:41] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[15:33:41] [INFO] POST parameter 'email' appears to be 'AND boolean-based blind - WHERE or HAVING clause' injectable 
[15:33:41] [INFO] heuristic (extended) test shows that the back-end DBMS could be 'Microsoft Access' 
it looks like the back-end DBMS is 'Microsoft Access'. Do you want to skip test payloads specific for other DBMSes? [Y/n] Y
[15:33:41] [INFO] testing 'Generic inline queries'
[15:33:41] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[15:33:41] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[15:33:42] [INFO] 'ORDER BY' technique appears to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test
[15:33:42] [INFO] target URL appears to have 11 columns in query
injection not exploitable with NULL values. Do you want to try with a random integer value for option '--union-char'? [Y/n] Y
[15:33:51] [WARNING] if UNION based SQL injection is not detected, please consider forcing the back-end DBMS (e.g. '--dbms=mysql') 
[15:33:54] [INFO] testing 'Generic UNION query (random number) - 1 to 20 columns'
[15:33:56] [INFO] testing 'Generic UNION query (NULL) - 21 to 40 columns'
[15:33:58] [INFO] testing 'Generic UNION query (random number) - 21 to 40 columns'
[15:34:00] [INFO] testing 'Generic UNION query (NULL) - 41 to 60 columns'
[15:34:02] [INFO] testing 'Generic UNION query (random number) - 41 to 60 columns'
[15:34:04] [INFO] testing 'Generic UNION query (NULL) - 61 to 80 columns'
[15:34:06] [INFO] testing 'Generic UNION query (random number) - 61 to 80 columns'
[15:34:08] [INFO] testing 'Generic UNION query (NULL) - 81 to 100 columns'
[15:34:11] [INFO] testing 'Generic UNION query (random number) - 81 to 100 columns'
[15:34:13] [INFO] checking if the injection point on POST parameter 'email' is a false positive
[15:34:13] [WARNING] false positive or unexploitable injection point detected
[15:34:13] [WARNING] POST parameter 'email' does not seem to be injectable
[15:34:13] [WARNING] heuristic (basic) test shows that POST parameter 'password' might not be injectable
[15:34:13] [INFO] testing for SQL injection on POST parameter 'password'
[15:34:13] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[15:34:24] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause'

